{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the Blockchain Labs\n\n\nOverview\n\n\n\n\nWith the popularity of cryptocurrencies (e.g., BitCoin, Ethereum, etc.), Blockchain, the backend technology that powers the cryptocurrencies, has raised to be a main-stream technique. It has the potential to disrupt many industries ranging from business, laws, finance, to many others. \n\n\nThe Blockchain provides the storage of transaction history in cryptocurrency and gives us an interface of reading or writing transactions. In this lab, the learning objective is for students to have a hands-on experience and in-depth understanding of Blockchain's  transactional interface. In addition, writing a transaction in Blockchain goes throug mining. This lab also introduces the basic concept of mining.\n\n\nLab Description: This module consists of four lab tasks: The first three labs explore the transactional and mining interface exposed by a Blockchain. The last two labs require designing client program to iterate and visualize the Blockchain transaction storage. The module is outlined below:\n\n\nBlockchain Storage and Mining\n\n\n\n\nIn this lab, you are given the initial state that a custom Blockchain network of several mines is hosted on an on-campus machine which has been running for several days. The Blockchain machine also runs a daemon that periodically instructs some miner to conduct transactions with other miners.  \n\n\n\n\nPrerequisites\n\n\n\n\n\n\nLinux Shell Commands\n\n\nUnderstand \nEthereum\n  \n\n\n\n\n\n\nLab Environment Setup\n\n\n\n\n1.    Download Ethereum clients\n\n    There are several \nEthereum\n \nclient\n implementation, we will use the \nGo\n implementation, that is, \nGeth\n,for this lab. You can choose to either install the \nGeth\n on your own machine or the Linux machine running on VirtualBox. See \nhere\n for more information.\n\n\nUbuntu Users\n Here is the instructions to install the \nGeth\n for Ubuntu.\n\n\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository -y ppa:ethereum/ethereum\n$ sudo apt-get update\n$ sudo apt-get install ethereum\n\n\n\n\nMac Users\n\n\nbrew tap ethereum/ethereum\nbrew install ethereum\n\n\n\n\nWindows Users\n\n\nhttps://github.com/ethereum/go-ethereum/wiki/Installation-instructions-for-Windows\n\n\n2.    Join the Blockchain network\n\n\n\n\n2.1 Connect to the Blockchain Gateway(Bootnode):\n Every blockchain starts with the genesis block. When you run geth with default settings for the first time, the main net genesis block is committed to the database. For a private network, you usually want a different genesis block. We have a pre-defined custom [\ngenesis.json\n] file. The \nconfig\n section ensures that certain protocol upgrades are immediately available. The \nalloc\n section pre-funds accounts, which is currently empty. \nFollowing the instructions below to run geth.\n\n\n$ mkdir <data-dir>\n$ geth --datadir <data-dir> init genesis.json  # create a database that uses this genesis bloc\n$ geth --datadir <data-dir> --networkid 7002017 --bootnodes enode://bc8d0a1a1590a1b44bac98ec878b179d9d82e94d03cbb5a58251232b69806bac9069f60c67d18931c773103232386ac241111c3cd5f3f532288388c97fb70d97@128.230.208.73:30301 console 2>console.log\n\n\n\n\nIn the last command above, \n--networkid\n specify the private network ID. Connections between nodes are valid only if peers have identical protocol version and network ID, you can effectively isolate your network by setting either of these to a non default value. \n--bootnode\n option specify the bootnode address, following the format \n[nodeID]:IP:port\n. Every subsequent Geth node pointed to the bootnode for peer discovery. \nThis page\n describes the options for \ngeth\n commands.  \n\n\n\n\n2.2 Add a Peer Miner:\n Add a peer node running on the remote machine by specify the node URL.\n\n\n>admin.addPeer(\"enode://7dfa61a25324880f03db7e4a63f7b0838c561bf7e00325a51f9723bb56be1bbd926f319a3d5817e9b574308b29ca74d5ecf25d7613e75aed9ab731105026715e@128.230.208.73:30303\")\n\n\n\n\nCheck the connectivity by running:\n\n\n> admin.peers\n\n\n\n\n3.    Start Mining\n\n\nBefore mining, the coinbase has to be specified to one personal account, where your earnings will be settled. Run following commands to create a new account, and set it as coinbase.\n\n\n> personal.newAccount() # create an Account\n> eth.accounts # check accounts\n> miner.setEtherbase(eth.accounts[0]) # that address that will receive your earnings\n\n\n\n\nYou can now start/stop the miner.\n\n\n> miner.start(1)    # 1 refers to one thread\n> miner.stop()\n\n\n\n\nTo know currently you are mining or not, you can run\n\n\n> miner.getHashrate()  # if you are mining, the hash rate should be a non-zero positive constant, and will change at different time\n\n\n\n\nThe list of \nGeth\n commands can be found on [\nthis page\n].  \n\n\n\n\nLab Tasks\n\n\n\n\nThe tasks in this lab require to inspect and modify the content of Blockchain. In addition to the Ethereum commands you used above, there are other relevant commands as below.\n\n\n> eth.accounts[0] # check the account id\n> eth.getBalance(<account>) # check the balance for one account, the argument is account id\n> web3.fromWei(<value>,\"ether\") # convert Wei to Ether\n> web3.toWei(<value>,\"ether\") #convert Ether to Wei\n> eth.blockNumber # check the latest block number on the chain\n> eth.getBlock(eth.blockNumber-3)  # display a certain block \n> eth.getBlock('latest', true)  # display the latest block\n> eth.getBlock('pending', true) # display the pending block\n> eth.sendTransaction({from:\"0x0c54f3f7d820bf52344772fa8ed097d1189cd93f\", to:\"0xda1b60c80502fea9977bab42dcebad05c289dcd2\", value:web3.toWei(1,\"ether\")})\n#eth.sendTransaction({from:senderAccount, to:receiverAccount, value: amount})\n> eth.getTransaction(\"0x57dfe8f7f4760f09cd76a8b09000fd43275d798503ed88ed6d8b39c1d5ce3157\")\n\n\n\n\nTask 1:\n After you started mining, show the coins that you have mined. Then wait 1 minute, check the balance again.\n\n\nTask 2:\n Show the content (all the blocks and transactions) on the blockchain. Then wait 1 minute, show the blockchain again to see how it is extended over time.\n\n\nTask 3:\n\n1.  Submit a transaction, say \ntx5\n, to the blockchain. You create another account as the recipient (seller) of the transaction.\n\n2.  Show whether transaction \ntx5\n is included in the Blockchain; if not wait for a while, check again.\n\n\nNote 1: The above command will return a hash tag which served as the ID of the transaction, you could use that ID to query the transaction in the future.\n\n\nNote 2: \nEther\n is the name of the currency used within Ethereum. Wei is the smallest unit in Ethereum. 1 Ether = 10^18 Wei. The account balance and transfer amount are shown in Wei. You can use the converter utility web3.fromWei and web3.toWei to convert between Ether and Wei.\n\n\nNote 3: Before sending transactions, you may need to unlock your personal wallet/account and input passphrase. Example:\n\n\npersonal.unlockAccount(eth.accounts[0])",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-blockchain-labs",
            "text": "",
            "title": "Welcome to the Blockchain Labs"
        },
        {
            "location": "/#overview",
            "text": "With the popularity of cryptocurrencies (e.g., BitCoin, Ethereum, etc.), Blockchain, the backend technology that powers the cryptocurrencies, has raised to be a main-stream technique. It has the potential to disrupt many industries ranging from business, laws, finance, to many others.   The Blockchain provides the storage of transaction history in cryptocurrency and gives us an interface of reading or writing transactions. In this lab, the learning objective is for students to have a hands-on experience and in-depth understanding of Blockchain's  transactional interface. In addition, writing a transaction in Blockchain goes throug mining. This lab also introduces the basic concept of mining.  Lab Description: This module consists of four lab tasks: The first three labs explore the transactional and mining interface exposed by a Blockchain. The last two labs require designing client program to iterate and visualize the Blockchain transaction storage. The module is outlined below:",
            "title": "Overview"
        },
        {
            "location": "/#blockchain-storage-and-mining",
            "text": "In this lab, you are given the initial state that a custom Blockchain network of several mines is hosted on an on-campus machine which has been running for several days. The Blockchain machine also runs a daemon that periodically instructs some miner to conduct transactions with other miners.     Prerequisites    Linux Shell Commands  Understand  Ethereum       Lab Environment Setup   1.    Download Ethereum clients \n    There are several  Ethereum   client  implementation, we will use the  Go  implementation, that is,  Geth ,for this lab. You can choose to either install the  Geth  on your own machine or the Linux machine running on VirtualBox. See  here  for more information.  Ubuntu Users  Here is the instructions to install the  Geth  for Ubuntu.  $ sudo apt-get install software-properties-common\n$ sudo add-apt-repository -y ppa:ethereum/ethereum\n$ sudo apt-get update\n$ sudo apt-get install ethereum  Mac Users  brew tap ethereum/ethereum\nbrew install ethereum  Windows Users  https://github.com/ethereum/go-ethereum/wiki/Installation-instructions-for-Windows  2.    Join the Blockchain network   2.1 Connect to the Blockchain Gateway(Bootnode):  Every blockchain starts with the genesis block. When you run geth with default settings for the first time, the main net genesis block is committed to the database. For a private network, you usually want a different genesis block. We have a pre-defined custom [ genesis.json ] file. The  config  section ensures that certain protocol upgrades are immediately available. The  alloc  section pre-funds accounts, which is currently empty. \nFollowing the instructions below to run geth.  $ mkdir <data-dir>\n$ geth --datadir <data-dir> init genesis.json  # create a database that uses this genesis bloc\n$ geth --datadir <data-dir> --networkid 7002017 --bootnodes enode://bc8d0a1a1590a1b44bac98ec878b179d9d82e94d03cbb5a58251232b69806bac9069f60c67d18931c773103232386ac241111c3cd5f3f532288388c97fb70d97@128.230.208.73:30301 console 2>console.log  In the last command above,  --networkid  specify the private network ID. Connections between nodes are valid only if peers have identical protocol version and network ID, you can effectively isolate your network by setting either of these to a non default value.  --bootnode  option specify the bootnode address, following the format  [nodeID]:IP:port . Every subsequent Geth node pointed to the bootnode for peer discovery.  This page  describes the options for  geth  commands.     2.2 Add a Peer Miner:  Add a peer node running on the remote machine by specify the node URL.  >admin.addPeer(\"enode://7dfa61a25324880f03db7e4a63f7b0838c561bf7e00325a51f9723bb56be1bbd926f319a3d5817e9b574308b29ca74d5ecf25d7613e75aed9ab731105026715e@128.230.208.73:30303\")  Check the connectivity by running:  > admin.peers  3.    Start Mining  Before mining, the coinbase has to be specified to one personal account, where your earnings will be settled. Run following commands to create a new account, and set it as coinbase.  > personal.newAccount() # create an Account\n> eth.accounts # check accounts\n> miner.setEtherbase(eth.accounts[0]) # that address that will receive your earnings  You can now start/stop the miner.  > miner.start(1)    # 1 refers to one thread\n> miner.stop()  To know currently you are mining or not, you can run  > miner.getHashrate()  # if you are mining, the hash rate should be a non-zero positive constant, and will change at different time  The list of  Geth  commands can be found on [ this page ].     Lab Tasks   The tasks in this lab require to inspect and modify the content of Blockchain. In addition to the Ethereum commands you used above, there are other relevant commands as below.  > eth.accounts[0] # check the account id\n> eth.getBalance(<account>) # check the balance for one account, the argument is account id\n> web3.fromWei(<value>,\"ether\") # convert Wei to Ether\n> web3.toWei(<value>,\"ether\") #convert Ether to Wei\n> eth.blockNumber # check the latest block number on the chain\n> eth.getBlock(eth.blockNumber-3)  # display a certain block \n> eth.getBlock('latest', true)  # display the latest block\n> eth.getBlock('pending', true) # display the pending block\n> eth.sendTransaction({from:\"0x0c54f3f7d820bf52344772fa8ed097d1189cd93f\", to:\"0xda1b60c80502fea9977bab42dcebad05c289dcd2\", value:web3.toWei(1,\"ether\")})\n#eth.sendTransaction({from:senderAccount, to:receiverAccount, value: amount})\n> eth.getTransaction(\"0x57dfe8f7f4760f09cd76a8b09000fd43275d798503ed88ed6d8b39c1d5ce3157\")  Task 1:  After you started mining, show the coins that you have mined. Then wait 1 minute, check the balance again.  Task 2:  Show the content (all the blocks and transactions) on the blockchain. Then wait 1 minute, show the blockchain again to see how it is extended over time.  Task 3: \n1.  Submit a transaction, say  tx5 , to the blockchain. You create another account as the recipient (seller) of the transaction. \n2.  Show whether transaction  tx5  is included in the Blockchain; if not wait for a while, check again.  Note 1: The above command will return a hash tag which served as the ID of the transaction, you could use that ID to query the transaction in the future.  Note 2:  Ether  is the name of the currency used within Ethereum. Wei is the smallest unit in Ethereum. 1 Ether = 10^18 Wei. The account balance and transfer amount are shown in Wei. You can use the converter utility web3.fromWei and web3.toWei to convert between Ether and Wei.  Note 3: Before sending transactions, you may need to unlock your personal wallet/account and input passphrase. Example:  personal.unlockAccount(eth.accounts[0])",
            "title": "Blockchain Storage and Mining"
        }
    ]
}